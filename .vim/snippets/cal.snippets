# objj
snippet objj
	OBJECT Codeunit ${1:ObjectNumber} ${2:ObjectName}
	{
	  OBJECT-PROPERTIES
	  {
		Date=06-06-12;
		Time=08:39:11;
		Modified=Yes;
		Version List=${3:xNDQ};
	  }
	  PROPERTIES
	  {
		OnRun=VAR
			  BEGIN
			  END;
	  }
	  CODE
	  {
		VAR
		  ${4:globalVariable}@1000 : Integer;

		BEGIN
		{
		  // ${8:DQN.NOV}
		  // ${9:Object name}Synchronize Queue Management
		  // We use this codeunit to sync. data from NAV to Magento
		  // -------------------------------------------------------------------------------------------------

		  // Usage:
		  //

		  // Remarks:
		  //
		}
		END.
	  }
	}
# for
snippet for
	for i:=1 to $${1:count} do
		$${2://code}
# forr
snippet forr
	for i:=1 to $${1:count} do begin
		${2://code}
	end;
# iff
snippet iff
	if (${1:condition}) then begin
		${2://code}
	end;
# if
snippet if
	if (${1:condition}) then
		${2://code}
# while
snippet while
	while (${1:condition}) then
		${2://code}
# whilee
snippet whilee
	while (${1:condition}) then begin
		${2://code}
	end;
# case
snippet case
	case ${1} of
		${2:case1} : begin
		end;
	end;
# comment
snippet //
	//
	// ${1: Functionname}
	//
# function
snippet fun
	PROCEDURE ${1:functionName}@${2:functionNumber}(${3:parameter@1000 : Text[80]});
	VAR
	  ${4:privateVariable}@1001 : Integer;
	BEGIN
	//
	// ${5: functionName}
	// END;
# IsClear
snippet isclear
	If ISCLEAR(${1:objName}) then
		If not CREATE(${2:objName}) then
			Error('Cannot create ADO Connection automation variable.');
# Util - window progress function
snippet fwindowprogress
	currentProgress := 0;
	dlgProgress.OPEN('@1@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\#2##############################', progressPercent, progressDetail);
	progressTotal := 1000000;
	timeProgress := TIME;
	REPEAT
	// Progress bar
	currentProgress += 1;
	IF timeProgress < TIME - 1000 THEN BEGIN // every second
		timeProgress := TIME;
		progressPercent := ROUND(currentProgress / progressTotal * 10000,1);
		dlgProgress.UPDATE;
	END;
	// some processing
	UNTIL currentProgress = progressTotal;
# Util - log duration
snippet flog
	PROCEDURE LogDuration@${1:functionNumber}(task@1000 : Text[80];duration@1003 : Duration);
	VAR
	  file@1001 : File;
	  output@1002 : Text[250];
	  logPath@1004 : Text[100];
	BEGIN
	  //
	  // Log duration of current running task for using later
	  // @task text
	  // @duration Duration
	  // @output the status string to txt file
	  //

	  file.TEXTMODE(TRUE);
	  file.WRITEMODE(TRUE);

	  logPath := ${2:logPath};
	  IF EXISTS(logPath) THEN
		file.OPEN(logPath);
		IF (file.LEN > 0) THEN
		  file.SEEK(file.LEN)
	  ELSE
		file.CREATE(logPath);

	  //output
	  output  := FORMAT(TODAY) + ' / ';
	  output  += FORMAT(TIME) + ' / ';
	  output  += task + ' / ';
	  output  += FORMAT(duration);
	  file.WRITE(output);

	  file.CLOSE;
	END;
